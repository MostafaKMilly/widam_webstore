// app/layout.tsx or app/layout.jsx
import type { Metadata } from "next";
import { Montserrat, Roboto } from "next/font/google"; // Import Cairo
import "./globals.css";
import Footer from "@/components/layout/Footer/Footer";
import Script from "next/script";
import Providers from "./providers";
import { Toaster } from "react-hot-toast";
import MainHeader from "@/components/layout/Header/MainHeader";
import { cookies } from "next/headers";
import { getDictionary } from "./dictionaries";
import { DictionaryProvider } from "@/lib/context/DictionaryContext";

const montserrat = Montserrat({
  subsets: ["latin"],
  variable: "--font-montserrat",
  display: "swap",
});

const roboto = Roboto({
  subsets: ["latin"],
  variable: "--font-roboto",
  display: "swap",
  weight: ["100", "300", "400", "500", "700"],
});

export const metadata: Metadata = {
  title: "Widam",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookiesStore = cookies();
  const language = cookiesStore.get("language")?.value || "en";

  const dict = await getDictionary(language as "en" | "ar");

  return (
    <html dir={language === "ar" ? "rtl" : "ltr"}>
      <head>
        <Script
          src={`https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAP_API_KEY}&libraries=places`}
        />
      </head>
      <body
        className={`flex flex-col min-h-screen ${
          language === "ar"
            ? `${roboto.variable} ${roboto.className}`
            : `${montserrat.variable} ${montserrat.className}`
        }`}
      >
        <Providers>
          <DictionaryProvider dictionary={dict}>
            <MainHeader />

            <main className="flex-grow pt-40">{children}</main>
            <Footer />
            <Toaster
              position="top-right"
              reverseOrder={false}
              toastOptions={{
                position: "top-center",
                // Default styles
                className: "",
                style: {
                  background: "#fff",
                  color: "#333",
                },
                // Success toast styling
                success: {
                  className: "bg-green-100 text-green-700",
                },
                // Error toast styling
                error: {
                  className: "bg-red-100 text-red-700",
                },
                // Custom styles for other types
                custom: {
                  className: "bg-blue-100 text-blue-700",
                },
              }}
            />
          </DictionaryProvider>
        </Providers>
      </body>
    </html>
  );
}
